/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crazy.snake.server;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author nguye
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.decode("#FAFAFA"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtOnline = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtRooms = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtPlayingRooms = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scrazy Snake Server");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Game Server");

        btnStart.setText("Start Server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jLabel2.setText("Online count (players)");

        txtOnline.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtOnline.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(txtOnline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtOnline))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("Rooms count ");

        txtRooms.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtRooms.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(48, 48, 48)
                .addComponent(txtRooms, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRooms))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("Playing Rooms");

        txtPlayingRooms.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtPlayingRooms.setText("0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(48, 48, 48)
                .addComponent(txtPlayingRooms, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPlayingRooms))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                startServer();
            }
        });
        thread.start();
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    ServerSocket ss;
    boolean started = false;
    Thread refreshUI;
    public static final String MSG_GENERATE_ROOM_ID = "MSG_GENERATE_ROOM_ID";
    public static final String MSG_JOIN_ROOM = "MSG_JOIN_ROOM";
    public static final String MSG_GET_ROOM_INFO = "MSG_GET_ROOM_INFO";
    public static final String MSG_GET_PLAYERS = "MSG_GET_PLAYERS";
    public static final String QUIT = "QUIT";
    public static final String MSG_CONNECT = "MSG_CONNECT";
    public static final String MSG_DISCONNECT = "MSG_DISCONNECT";
    public static final String MSG_ERROR = "MSG_ERROR";
    public static final String MSG_SUCCESS = "MSG_SUCCESS";
    public static final String MSG_LEAVE_ROOM = "MSG_LEAVE_ROOM";
    public static final String MSG_START_ROOM = "MSG_START_ROOM";

    static int clientCount = 0;
    static HashMap<Integer, ArrayList<String>> rooms = new HashMap<>();
    static HashMap<Integer, String> roomsAdmin = new HashMap<Integer, String>();
    static ArrayList<Integer> playingRooms = new ArrayList<Integer>();
    static ArrayList<String> players = new ArrayList<String>();
    public static String defaulServer = "localhost";
    public static int defaultPort = 3204;

    private static ServerSocket generateServer() {
        try {
            ServerSocket server = new ServerSocket(defaultPort);
            return server;
        } catch (IOException e) {
        }
        int port = 1;
        while (port <= 65535) {
            try {
                ServerSocket server = new ServerSocket(port);
                return server;
            } catch (IOException e) {
            }
            port++;
        }
        return null;
    }

    static int createNewRoomID() {
        int result = -1;
        if (rooms.size() > 9999) {

        } else {
            Random random = new Random();
            do {
                result = random.nextInt(10000);
            } while (rooms.containsKey(result));
        }
        return result;
    }

    static void startRoom(int roomID) {
        playingRooms.add(roomID);
    }

    static String getOnlinePlayers() {
        StringBuilder sb = new StringBuilder("");
        Iterator it = rooms.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry m = (Map.Entry) it.next();
            ArrayList<String> members = (ArrayList<String>) m.getValue();
            for (String member : members) {
                sb.append(member + "\n");
            }
        }
        return sb.toString();
    }

    static void leaveRoom(int roomID, String userName) {
        rooms.get(roomID).remove(userName);
        if (roomsAdmin.get(roomID) != null && roomsAdmin.get(roomID).equals(userName) && rooms.get(roomID).size() > 0) {
            roomsAdmin.replace(roomID, rooms.get(roomID).get(0));
        }
        if (rooms.get(roomID) != null && rooms.get(roomID).size() < 1) {
            rooms.remove(roomID);
            roomsAdmin.remove(roomID);
        }
    }

    private void updateUI() {
        txtOnline.setText(clientCount + "");
        txtPlayingRooms.setText(playingRooms.size() + "");
        txtRooms.setText(rooms.size() + "");
    }

    private void startServer() {
        refreshUI = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    updateUI();
                }
            }
        });
        if (started) {
            try {
                ss.close();
                btnStart.setText("Start server");
                started = false;
                refreshUI.stop();
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                ss = generateServer();
                if (ss == null) {
                    txtLog.append("All port on this computer are already used cannot create server!");
                    JOptionPane.showMessageDialog(this, "All port on this computer are already used\n cannot create server!",
                            "Error", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    started = true;
                    btnStart.setText("Stop server");
                    refreshUI.start();
                    do {
                        txtLog.append("\nServer port: " + ss.getLocalPort());
                        txtLog.append("\nWaiting for client");
                        Socket s = ss.accept();
                        clientCount++;
                        ClientThread clienThread = new ClientThread(s);
                        clienThread.start();
                    } while (true);
                }
            } catch (IOException ex) {
                txtLog.append("Server closed");
            }
        }
    }

    static String joinRoom(int roomID, String userName) {
        if (!rooms.containsKey(roomID)) {
            return MSG_ERROR + " room does not exist";
        } else {
            if (rooms.get(roomID).size() > 3) {
                return MSG_ERROR + " room is full";
            } else {
                if (playingRooms.contains(roomID)) {
                    return MSG_ERROR + " room is playing";
                } else {
                    rooms.get(roomID).add(userName);
                    if (roomsAdmin.get(roomID).equals("")) {
                        roomsAdmin.get(roomID).replaceAll(roomsAdmin.get(roomID), userName);
                    }
                    return MSG_SUCCESS;
                }
            }
        }
    }

    static class ClientThread extends Thread {

        Socket s;

        public ClientThread(Socket s) {
            this.s = s;
        }

        @Override
        public void run() {
            super.run(); //To change body of generated methods, choose Tools | Templates.
            boolean run = true;
            InputStream is;
            try {
                is = s.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(is));

                OutputStream os = s.getOutputStream();
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(os));
                String receivedMessage;

                do {
                    receivedMessage = br.readLine();
                    String userName = "";
                    int roomID = -1;
                    try {
                        if (receivedMessage != null) {
                            if (receivedMessage.contains(MainForm.MSG_CONNECT)) {
                                userName = receivedMessage.substring(receivedMessage.indexOf("|") + 1);
                                receivedMessage = MainForm.MSG_CONNECT;
                            }
                            if (receivedMessage.contains(MainForm.MSG_DISCONNECT)) {
                                userName = receivedMessage.substring(receivedMessage.indexOf("|") + 1);
                                receivedMessage = MainForm.MSG_DISCONNECT;
                            }
                            if (receivedMessage.contains(MainForm.MSG_GENERATE_ROOM_ID)) {
                                userName = receivedMessage.substring(receivedMessage.indexOf("|") + 1);
                                receivedMessage = MainForm.MSG_GENERATE_ROOM_ID;
                            }
                            if (receivedMessage.contains(MainForm.MSG_JOIN_ROOM)) {
                                String[] strs = receivedMessage.split("\\|");
                                try {
                                    roomID = Integer.parseInt(strs[1].trim());
                                } catch (Exception ebc) {
                                }
                                userName = strs[2];
                                receivedMessage = MainForm.MSG_JOIN_ROOM;
                            }
                            if (receivedMessage.contains(MainForm.MSG_LEAVE_ROOM)) {
                                String[] strs = receivedMessage.split("\\|");
                                try {
                                    roomID = Integer.parseInt(strs[1].trim());
                                } catch (Exception ebc) {
                                }
                                userName = strs[2];
                                receivedMessage = MainForm.MSG_LEAVE_ROOM;
                            }
                            if (receivedMessage.contains(MainForm.MSG_GET_ROOM_INFO)) {
                                try {
                                    roomID = Integer.parseInt(receivedMessage.substring(receivedMessage.indexOf("|") + 1));
                                } catch (Exception ebc) {
                                }
                                receivedMessage = MainForm.MSG_GET_ROOM_INFO;
                            }
                            if (receivedMessage.contains(MainForm.MSG_START_ROOM)) {
                                try {
                                    roomID = Integer.parseInt(receivedMessage.substring(receivedMessage.indexOf("|") + 1));
                                } catch (Exception ebc) {
                                }
                                receivedMessage = MainForm.MSG_START_ROOM;
                            }
                        }
                    } catch (Exception eb) {

                    }
                    if (receivedMessage != null) {
                        switch (receivedMessage) {
                            case MainForm.MSG_CONNECT:
                                if (players.contains(userName)) {
                                    bw.write(MainForm.MSG_ERROR);
                                    bw.newLine();
                                    bw.flush();
                                } else {
                                    players.add(userName);
                                    bw.write(players.toString());
                                    bw.newLine();
                                    bw.flush();
                                }
                                break;
                            case MainForm.MSG_DISCONNECT:
                                if (!players.contains(userName)) {
                                    bw.write(MainForm.MSG_ERROR);
                                    bw.newLine();
                                    bw.flush();
                                } else {
                                    players.remove(userName);
                                    clientCount--;
                                    bw.write("Removed " + userName);
                                    bw.newLine();
                                    bw.flush();
                                    run = false;
                                }
                                break;
                            case MainForm.MSG_GENERATE_ROOM_ID:
                                int newRoomID = createNewRoomID();
                                bw.write(newRoomID + "");
                                bw.newLine();
                                bw.flush();
                                ArrayList<String> members = new ArrayList<>();
                                members.add(userName);
                                rooms.put(newRoomID, members);
                                roomsAdmin.put(newRoomID, userName);
                                break;
                            case MainForm.MSG_GET_ROOM_INFO:
                                bw.write(roomsAdmin.get(roomID));
                                bw.newLine();
                                bw.write(rooms.get(roomID).toString());
                                bw.newLine();
                                bw.write(playingRooms.contains(roomID) ? "true" : "false");
                                bw.newLine();
                                bw.flush();
                                break;
                            case MainForm.MSG_LEAVE_ROOM:
                                leaveRoom(roomID, userName);
                                break;
                            case MainForm.MSG_GET_PLAYERS:
                                bw.write(players.toString());
                                bw.newLine();
                                bw.flush();
                                break;
                            case MainForm.MSG_JOIN_ROOM:
                                bw.write(joinRoom(roomID, userName));
                                bw.newLine();
                                bw.flush();
                                break;
                            case MainForm.MSG_START_ROOM:
                                startRoom(roomID);
                                break;
                            case QUIT:
                                bw.close();
                                br.close();
                                run = false;
                                return;
                        }
                    }
                } while (run);
                s.close();
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JLabel txtOnline;
    private javax.swing.JLabel txtPlayingRooms;
    private javax.swing.JLabel txtRooms;
    // End of variables declaration//GEN-END:variables
}
